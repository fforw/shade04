var Demo=function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(o,r,function(e){return n[e]}.bind(null,r));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=4)}([function(n,e,t){},function(n,e,t){(function(e){(function(){var t,o,r,a,u,i;"undefined"!=typeof performance&&null!==performance&&performance.now?n.exports=function(){return performance.now()}:null!=e&&e.hrtime?(n.exports=function(){return(t()-u)/1e6},o=e.hrtime,a=(t=function(){var n;return 1e9*(n=o())[0]+n[1]})(),i=1e9*e.uptime(),u=a-i):Date.now?(n.exports=function(){return Date.now()-r},r=Date.now()):(n.exports=function(){return(new Date).getTime()-r},r=(new Date).getTime())}).call(this)}).call(this,t(2))},function(n,e){var t,o,r=n.exports={};function a(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function i(n){if(t===setTimeout)return setTimeout(n,0);if((t===a||!t)&&setTimeout)return t=setTimeout,setTimeout(n,0);try{return t(n,0)}catch(e){try{return t.call(null,n,0)}catch(e){return t.call(this,n,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:a}catch(n){t=a}try{o="function"==typeof clearTimeout?clearTimeout:u}catch(n){o=u}}();var s,c=[],l=!1,f=-1;function p(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&v())}function v(){if(!l){var n=i(p);l=!0;for(var e=c.length;e;){for(s=c,c=[];++f<e;)s&&s[f].run();f=-1,e=c.length}s=null,l=!1,function(n){if(o===clearTimeout)return clearTimeout(n);if((o===u||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(n);try{o(n)}catch(e){try{return o.call(null,n)}catch(e){return o.call(this,n)}}}(n)}}function d(n,e){this.fun=n,this.array=e}function m(){}r.nextTick=function(n){var e=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)e[t-1]=arguments[t];c.push(new d(n,e)),1!==c.length||l||i(v)},d.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(n){return[]},r.binding=function(n){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(n){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},,function(n,e,t){"use strict";t.r(e);t(0),t(1);function o(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}var r=/^(#)?([0-9a-f]+)$/i;function a(n){var e=n.toString(16);return 1===e.length?"0"+e:e}function u(n,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?n+6*(e-n)*t:t<.5?e:t<2/3?n+(e-n)*(2/3-t)*6:n}var i,s,c,l,f,p,v,d,m,x,h,g,y,b,P=function(){function n(e,t,o){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.r=void 0,this.g=void 0,this.b=void 0,this.r=e,this.g=t,this.b=o}var e,t,i;return e=n,i=[{key:"validate",value:function(e){var t;if("string"!=typeof e||!(t=r.exec(e)))return null;var o=t[2];return 3===o.length?new n(17*parseInt(o[0],16),17*parseInt(o[1],16),17*parseInt(o[2],16)):6===o.length?new n(parseInt(o.substring(0,2),16),parseInt(o.substring(2,4),16),parseInt(o.substring(4,6),16)):null}},{key:"from",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(Array.isArray(e)){for(var o=e.length,r=new Float32Array(3*o),a=t/255,u=0,i=0;i<o;i++){var s=n.from(e[i]);r[u++]=s.r*a,r[u++]=s.g*a,r[u++]=s.b*a}return r}var c=n.validate(e);if(!c)throw new Error("Invalid color "+e);return c.r*=t,c.g*=t,c.b*=t,c}},{key:"fromHSL",value:function(e,t,o){var r,a,i;if(t<=0)r=a=i=o;else{var s=o<.5?o*(1+t):o+t-o*t,c=2*o-s;r=u(c,s,e+1/3),a=u(c,s,e),i=u(c,s,e-1/3)}return new n(Math.round(255*r),Math.round(255*a),Math.round(255*i))}}],(t=[{key:"mix",value:function(e,t,o){return o||(o=new n),o.r=this.r+(e.r-this.r)*t|0,o.g=this.g+(e.g-this.g)*t|0,o.b=this.b+(e.b-this.b)*t|0,o}},{key:"multiply",value:function(e,t){return t||(t=new n),t.r=this.r*e,t.g=this.g*e,t.b=this.b*e,t}},{key:"toRGBHex",value:function(){return"#"+a(this.r)+a(this.g)+a(this.b)}},{key:"toHex",value:function(){return(this.r<<16)+(this.g<<8)+this.b}}])&&o(e.prototype,t),i&&o(e,i),n}(),C=(Math.sqrt(5),Math.PI,{width:0,height:0}),z=null,w=0,S=0,_=0;function I(){var n=-16&window.innerWidth,e=0|window.innerHeight;C.width=n,C.height=e,i.width=n,i.height=e,w=n/2,S=e/2,s.viewport(0,0,i.width,i.height)}function T(n,e,t){var o=n.createShader(e);if(n.shaderSource(o,t),n.compileShader(o),n.getShaderParameter(o,n.COMPILE_STATUS))return o;console.error(n.getShaderInfoLog(o)),n.deleteShader(o)}function A(n){if(z&&(f.innerHTML=_+"/1200",_++>1200))return z.stop(),void z.save();var e=h?1:-1;s.uniform1f(p,n/1e3),s.uniform2f(v,C.width,C.height),s.uniform4f(d,w,C.height-S,g*e,(C.height-y)*e),s.clearColor(0,0,0,0),s.clear(s.COLOR_BUFFER_BIT);var t=s.TRIANGLES;s.drawArrays(t,0,6),requestAnimationFrame(A),z&&z.capture(i)}function R(n){h&&(w=n.clientX-b.left+self.pageXOffset,S=n.clientY-b.top+self.pageYOffset)}function B(n){h=!0,g=n.clientX-b.left+self.pageXOffset,y=n.clientY-b.top+self.pageYOffset,w=g,S=y}function D(n){h=!1}window.onload=function(){if(i=document.getElementById("screen"),!(s=i.getContext("webgl2")))return i.parentNode.removeChild(i),n="Cannot run shader. Your browser does not support WebGL2.",void(document.getElementById("out").innerHTML="<p>"+n+"</p>");var n,e=T(s,s.VERTEX_SHADER,"#version 300 es\n#define GLSLIFY 1\n\n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nin vec4 a_position;\n\n// all shaders have a main function\nvoid main() {\n\n    // gl_Position is a special variable a vertex shader\n    // is responsible for setting\n    gl_Position = a_position;\n}\n"),t=T(s,s.FRAGMENT_SHADER,"#version 300 es\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform float u_time;\nuniform vec2 u_resolution;\nuniform vec4 u_mouse;\nuniform vec3 u_palette[8];\nuniform float u_shiny[8];\n\nconst float pi = 3.141592653589793;\nconst float tau = pi * 2.0;\nconst float hpi = pi * 0.5;\nconst float phi = (1.0+sqrt(5.0))/2.0;\n\nout vec4 outColor;\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define ROT(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define SHEARX(a) mat2(1, 0, sin(a), 1)\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\n////////////////////// NOISE\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //  x0 = x0 - 0. + 0.0 * C\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0 );\n    vec4 p = permute( permute( permute(\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0/7.0; // N=7\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n    dot(p2,x2), dot(p3,x3) ) );\n}\n\n// Camera helper\n\nvec3 Camera(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n    r = normalize(\n    cross(\n    vec3(0, 1, 0),\n    f\n    )\n    ),\n    u = cross(f, r),\n    c = p + f * z,\n    i = c + uv.x*r + uv.y*u,\n    d = normalize(i-p);\n    return d;\n}\n\n// 2d rotation matrix helper\nmat2 Rot(float a) {\n    float x = cos(a);\n    float y = sin(a);\n    return mat2(x, -y, y, x);\n}\n\n// RAY MARCHING PRIMITIVES\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5+0.5*(b-a)/k, 0., 1.);\n    return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n\n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n\n    vec3 c = a + t*ab;\n\n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n\n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n\n    vec3 c = a + t*ab;\n\n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n\n    return e+i;\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p)-s;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdRoundBox(vec3 p, vec3 b, float r)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;\n}\n\nfloat sdBeam(vec3 p, vec3 c)\n{\n    return length(p.xz - c.xy)-c.z;\n}\n\nfloat dBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec2 opUnion(vec2 curr, float d, float id)\n{\n//    if (d < curr.x)\n//    {\n//        curr.x = d;\n//        curr.y = id;\n//    }\n//\n//    return curr;\n\n    float s = step(curr.x, d);\n    return s * curr + (1.0 - s) * vec2(d, id);\n}\n\n// Minimum - with corresponding object ID.\nvec2 objMin(vec2 a, vec2 b){\n\n    // Returning the minimum distance along with the ID of the\n    // object. This is one way to do it. There are others.\n\n    // Equivalent to: return a.x < b.x ? a: b;\n    float s = step(a.x, b.x);\n    return s*a + (1. - s)*b;\n}\n\nvec2 softMinUnion(vec2 curr, float d, float id)\n{\n    if (d < curr.x)\n    {\n        curr.x = smin(curr.x, d, 0.5);\n        curr.y = id;\n    }\n\n    return curr;\n}\n\nfloat sdBoundingBox(vec3 p, vec3 b, float e)\n{\n    p = abs(p)-b;\n    vec3 q = abs(p+e)-e;\n    return min(min(\n    length(max(vec3(p.x, q.y, q.z), 0.0))+min(max(p.x, max(q.y, q.z)), 0.0),\n    length(max(vec3(q.x, p.y, q.z), 0.0))+min(max(q.x, max(p.y, q.z)), 0.0)),\n    length(max(vec3(q.x, q.y, p.z), 0.0))+min(max(q.x, max(q.y, p.z)), 0.0));\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n    length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n    p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat shape(float v, float x)\n{\n    return x > 0.0 ? -abs(v) : abs(v);\n}\n\nconst mat2 frontPlaneRot = ROT(0.05235987755982988);\nconst mat2 backPlaneRot = ROT(-0.05235987755982988);\nconst mat2 sCutRot = ROT(0.88);\nconst mat2 rotate90 = ROT(1.5707963267948966);\nconst mat2 fourShear = SHEARX(-0.20943951023931953);\n\nvec2 getDistance(vec3 p) {\n\n    float t = u_time;\n\n    // ground plane\n    //float pd = p.y + 2.0;\n\n    vec2 result = vec2(1e6, 0);\n    float sphere = sdSphere( p , 1.8 );\n\n    if (sphere < 0.2)\n    {\n        vec3 cutoutPos = p;\n\n        cutoutPos.yz *= rotate90;\n\n        float cutout = sdCappedCylinder(cutoutPos, 1.89, 1.0);\n\n        float gCutout = sdCappedCylinder(cutoutPos, 1.78, 1.0);\n\n        float gGapCutout = dBox(cutoutPos - vec3(1.36,0, 0.36), vec3(1,1,0.36));\n\n        float gInnerCutout = sdRoundBox(cutoutPos - vec3(-0.2,0,0), vec3(0.42,1,1.12), 0.45);\n\n        float flattenedSideCutout = dot(p - vec3(-0.98,0,0), vec3(-1,0,0) );\n\n        float gFlapCutout = dBox(cutoutPos - vec3(0.62 + 0.35,0, -0.35), vec3(0.5,1,0.35));\n\n        float round = 0.4;\n\n        // Letter S\n\n        float sCutout = sdRoundBox(cutoutPos - vec3(-0.2,0,0.5), vec3(0.44 - round, 1.0- round, 0.8-round), round);\n\n        round = 0.2;\n\n        vec3 s2Pos = cutoutPos- vec3( 0.21,0,0.56);\n\n        s2Pos.xz *= sCutRot;\n\n        float s2Cutout = sdRoundBox(s2Pos , vec3(0.51 - round, 1.1 - round, 0.18-round), round);\n        sCutout = max(-s2Cutout, sCutout);\n\n        s2Pos = cutoutPos- vec3( -0.6,0,0.36);\n        s2Pos.xz *= sCutRot;\n\n        float s3Cutout = sdRoundBox(s2Pos , vec3(0.51 - round, 1.1 - round, 0.18-round), round);\n        sCutout = max(-s3Cutout, sCutout);\n\n        float sSerif = dBox(cutoutPos - vec3(0.2,0, 1.02), vec3(0.05,1,0.24));\n        sCutout = min(sSerif, sCutout);\n\n        sSerif = dBox(cutoutPos - vec3(-0.66,0, 0.03), vec3(0.05,1,0.24));\n        sCutout = min(sSerif, sCutout);\n\n        // Zero\n\n        vec3 elongation = vec3(0,1,0.32);\n\n        vec3 zCutoutPos = cutoutPos- vec3(-0.47,0,-0.95);\n\n        vec3 q = zCutoutPos - clamp( zCutoutPos, -elongation, elongation );\n\n        float zeroCutout = sdTorus(q , vec2(0.155, 0.07));\n\n        // four\n\n        vec3 fourShBoxPos = p;\n        fourShBoxPos.yx *= fourShear;\n        float fourShBox = dBox(fourShBoxPos - vec3(.14,-0.8,0), vec3(0.1,0.38,1));\n\n        float fourHBox = dBox(p - vec3(.14,-1.08,0), vec3(0.28,0.1,1));\n\n        float fourVBox = dBox(p - vec3(.25,-1.15,0), vec3(0.1, 0.3,1));\n\n        gInnerCutout = max(flattenedSideCutout, gInnerCutout);\n        gInnerCutout = max(-gFlapCutout, gInnerCutout);\n        gInnerCutout = max(-sCutout, gInnerCutout);\n        gInnerCutout = max(-zeroCutout, gInnerCutout);\n        gInnerCutout = max(-fourShBox, gInnerCutout);\n        gInnerCutout = max(-fourHBox, gInnerCutout);\n        gInnerCutout = max(-fourVBox, gInnerCutout);\n\n        gCutout = max(-gGapCutout, gCutout);\n        gCutout = max(-gInnerCutout, gCutout);\n        cutout = max(-gCutout, cutout);\n\n        vec3 frontPlane = vec3(0,0,-1);\n        frontPlane.yz *= frontPlaneRot;\n\n        vec3 backPlane = vec3(0,0,1);\n        backPlane.yz *= backPlaneRot;\n\n        float front = dot(p + vec3(0,0,.25), frontPlane );\n        float back = dot(p - vec3(0,0,.25), backPlane)  ;\n\n        sphere = max(sphere, front);\n        sphere = max(sphere, back) - 0.2;\n        sphere = max(-cutout, sphere);\n\n        // DEBUG\n        //    result = opUnion(result, gFlapCutout, 2.1);\n        //    result = opUnion(result, gGapCutout, 1.9);\n        //    result = opUnion(result, sCutout, 2.2);\n        //    result = opUnion(result, zeroCutout, 2.3);\n        //    result = opUnion(result, fourShBox, 2.4);\n        //    result = opUnion(result, fourHBox, 2.5);\n        //    result = opUnion(result, fourVBox, 2.6);\n        //    result = opUnion(result, s2Cutout, 2.7);\n        //    result = opUnion(result, s3Cutout, 2.8);\n\n    }\n\n    //result = opUnion(result, pd, 4.0);\n    result = opUnion(result, sphere, 1.0);\n\n    vec3 shaftPos = p;\n\n    shaftPos.x += (sin((p.z + u_time * 10.0) * 0.23) + sin((p.z + u_time * 10.0) * 0.27)) * 0.55;\n\n    shaftPos.yz *= rotate90;\n    float zOffset = - u_time * 10.0;\n\n    float shaft = -sdBeam( shaftPos, vec3(0,0,3) );\n\n    float mat = 4.0;\n\n    float d = length(vec3(p.x, p.y, 0.0));\n    vec3 sideShaftPos = p;\n\n    if (abs(d) > 1.9)\n    {\n        vec3 noisePos = p - vec3(0,0, zOffset);\n        float n = snoise(noisePos);\n        float off = shape(n,p.x) * 0.25;\n        shaft = -sdBeam( shaftPos + off , vec3(0,0,3) ) * 0.6;\n        mat = n < 0.4 ? 4.0 : 5.0;\n\n        sideShaftPos += off * 0.9;\n\n        float bottom = dot(p + vec3(0,2.2,0) + off * 0.5, vec3(0,1,0) );\n\n        result = opUnion(result, bottom, 3.0);\n    }\n\n    sideShaftPos.z += u_time * 10.0;\n\n    sideShaftPos.x += floor(rand(floor(sideShaftPos.z/60.0)) * 4.0) * 10.0 - 10.0;\n    sideShaftPos.z = mod(sideShaftPos.z - 10. + 0.5 * 60.0, 60.0)- 30.0;\n\n    float sideShaft = -dBox( sideShaftPos, vec3(10,3,3) );\n\n    shaft = max(shaft, sideShaft);\n\n    result = opUnion(result, shaft, mat);\n\n    vec3 supportPos = p;\n    supportPos.x = abs(supportPos.x);\n    supportPos.x -= 2.5;\n    supportPos.z -= zOffset;\n\n    float c = 20.0;\n    supportPos.z = mod(supportPos.z+0.5*c,c)-0.5*c;\n\n    supportPos.yz *= rotate90;\n\n    float support = sdHexPrism(supportPos, vec2(0.4, 2.5)) - 0.05;\n\n    vec3 support2Pos = p;\n\n    support2Pos.z = mod(supportPos.z+0.5*c,c)-0.5*c;\n\n    float support2 = sdHexPrism(support2Pos - vec3(0,2.5,0), vec2(0.4, 20)) - 0.05;\n\n    vec3 support3Pos = p;\n    support3Pos.z -= zOffset;\n    support3Pos.z = mod(support3Pos.z+0.5*c,c)-0.5*c;\n    support3Pos.xz *= rotate90;\n\n    float support3 = sdHexPrism(support3Pos - vec3(0,2.5,0), vec2(0.4, 20)) - 0.05;\n\n    result = opUnion(result, support, 6.0);\n    result = opUnion(result, support2, 6.0);\n    result = opUnion(result, support3, 6.0);\n\n    return result;\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd) {\n\n    float dO = 0.;\n    float id = 0.0;\n\n    for (int i=0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        vec2 result = getDistance(p);\n        float dS = result.x;\n        dO += dS;\n        id = result.y;\n        if (dO > MAX_DIST || abs(dS) < SURF_DIST)\n        break;\n    }\n\n    return vec2(dO, id);\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDistance(p).x;\n    vec2 e = vec2(.001, 0);\n\n    vec3 n = d - vec3(\n        getDistance(p-e.xyy).x,\n        getDistance(p-e.yxy).x,\n        getDistance(p-e.yyx).x\n    );\n\n    return normalize(n);\n}\n\nvec3 getPaletteColor(float id)\n{\n    int last = u_palette.length() - 1;\n    //return id < float(last) ? mix(u_palette[int(id)], u_palette[int(id) + 1], fract(id)) : u_palette[last];\n    return mix(u_palette[int(id)], u_palette[int(id) + 1], fract(id));\n}\n\nvec3 applyFog( in vec3  rgb,      // original color of the pixel\n    in float distance, // camera to point distance\n    in vec3  rayOri,   // camera position\n    in vec3  rayDir,\n    in vec3 p)  // camera to point vector\n{\n    float pos = p.z + u_time * 12.0;\n\n    float c = 0.008;\n    float b = 0.95 + sin((pos + p.x * sin(pos * 0.27)) * 0.31 ) * 0.15 + sin(pos * 0.17 ) * 0.15;\n\n    float fogAmount = c * exp(-rayOri.y*b) * (1.0-exp( -distance*rayDir.y*b ))/rayDir.y;\n    vec3  fogColor  = vec3(0.,0.30196078431372547,0.615686274509804);\n    return mix( rgb, fogColor, fogAmount );\n}\nvoid main(void)\n{\n    vec2 uv = (gl_FragCoord.xy-.5*u_resolution.xy)/u_resolution.y;\n    vec2 m = u_mouse.xy/u_resolution.xy;\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(\n    (cos(u_time * 1.7) + cos(u_time * 1.5)) * 0.7,\n    (sin(u_time * 2.1) - sin(u_time * 1.9)) * 0.5,\n        -10.0 + sin(u_time) * 2.0\n    );\n\n    //    ro.yz *= Rot((-m.y + 0.5)* 7.0);\n//    ro.xz *= Rot((-m.x + 0.5)* 7.0 + u_time);\n\n    vec3 lookAt = vec3(0);\n\n    vec3 rd = Camera(uv, ro, lookAt, 1.3);\n\n    vec2 result = rayMarch(ro, rd);\n\n    float d = result.x;\n\n    vec3 p = ro + rd * d;\n    if (d < MAX_DIST) {\n\n        vec3 lightPos = ro + vec3(0,1,0);\n        vec3 lightDir = normalize(lightPos - p);\n        vec3 norm = getNormal(p);\n\n        vec3 lightColor = vec3(2.8);\n\n        float id = result.y;\n\n        // ambient\n        vec3 ambient = lightColor * vec3(0.001);\n\n        // diffuse\n        float diff = max(dot(norm, lightDir), 0.0);\n        vec3 tone = getPaletteColor(id);\n\n        if (id == 4.0)\n        {\n            tone *= snoise(p + vec3(0,0, u_time * 10.0)) * 0.5;\n        }\n\n        vec3 diffuse = lightColor * (diff * tone);\n\n        // specular\n        vec3 viewDir = normalize(ro);\n        vec3 reflectDir = reflect(-lightDir, norm);\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_shiny[int(id)]);\n        vec3 specular = lightColor * spec * vec3(0.7843,0.8823,0.9451) * (id == 1.0 ? 0.24 : 0.1);\n\n        col = (ambient + diffuse + specular);\n\n    }\n    col = applyFog(col, d, ro, rd, p);\n\n    //col = pow(col, vec3(1.0/2.2));\n\n    outColor = vec4(\n        col,\n        1.0\n    );\n\n    //outColor = vec4(1,0,1,1);\n}\n");l=function(n,e,t){var o=n.createProgram();if(n.attachShader(o,e),n.attachShader(o,t),n.linkProgram(o),n.getProgramParameter(o,n.LINK_STATUS))return o;console.error(n.getProgramInfoLog(o)),n.deleteProgram(o)}(s,e,t);var o=s.getAttribLocation(l,"a_position"),r=s.createBuffer();s.bindBuffer(s.ARRAY_BUFFER,r);s.bufferData(s.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,1,1,-1]),s.STATIC_DRAW),c=s.createVertexArray(),s.bindVertexArray(c),s.enableVertexAttribArray(o);var a=s.FLOAT;s.vertexAttribPointer(o,2,a,!1,0,0),I(),s.viewport(0,0,s.canvas.width,s.canvas.height),p=s.getUniformLocation(l,"u_time"),v=s.getUniformLocation(l,"u_resolution"),d=s.getUniformLocation(l,"u_mouse"),m=s.getUniformLocation(l,"u_palette"),x=s.getUniformLocation(l,"u_shiny"),s.useProgram(l),s.bindVertexArray(c),window.addEventListener("resize",I,!0),i.addEventListener("mousemove",R,!0),i.addEventListener("mousedown",B,!0),document.addEventListener("mouseup",D,!0),b=document.getElementById("screen").getBoundingClientRect();var u=P.from(["#000","#fff","#c02","#1b1d26","#16181d","#010101","#18120c","#f0f"],.2);s.uniform3fv(m,u),s.uniform1fv(x,new Float32Array([2,30,2,2,2,2,2,2])),requestAnimationFrame(A),f=document.querySelector(".github"),z&&z.start()}}]);
//# sourceMappingURL=bundle-main-8c59a1ad10f83d598819.js.map