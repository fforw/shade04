{"version":3,"sources":["webpack://Demo/webpack/bootstrap","webpack://Demo/./src/shade04.frag","webpack://Demo/./src/Color.js","webpack://Demo/./src/index.js","webpack://Demo/./src/shade04.vert"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","colorRegExp","hex","toString","length","hue2rgb","q","Color","g","b","this","color","exec","col","parseInt","substring","factor","Array","isArray","array","Float32Array","f","off","from","validate","Error","h","Math","round","other","ratio","out","console","log","fragmentShaderSource","sqrt","PI","canvas","gl","vao","program","u_time","u_resolution","u_mouse","u_palette","u_shiny","mouseDown","startX","startY","canvasBounds","config","width","height","mouseX","mouseY","resize","window","innerWidth","innerHeight","viewport","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","deleteShader","main","time","uniform1f","uniform2f","uniform4f","clearColor","clear","COLOR_BUFFER_BIT","primitiveType","TRIANGLES","drawArrays","requestAnimationFrame","onMouseMove","ev","clientX","left","self","pageXOffset","clientY","top","pageYOffset","onMouseDown","onMouseUp","onload","document","getElementById","getContext","parentNode","removeChild","msg","innerHTML","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createVertexArray","bindVertexArray","enableVertexAttribArray","FLOAT","vertexAttribPointer","getUniformLocation","useProgram","addEventListener","getBoundingClientRect","paletteArray","uniform3fv","uniform1fv"],"mappings":"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","file":"bundle-main-c485669c72f1c9930a11.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export default \"#version 300 es\\nprecision lowp float;\\n#define GLSLIFY 1\\n\\nuniform float u_time;\\nuniform vec2 u_resolution;\\nuniform vec4 u_mouse;\\nuniform vec3 u_palette[7];\\nuniform float u_shiny[7];\\n\\nconst float pi = 3.141592653589793;\\nconst float tau = pi * 2.0;\\nconst float hpi = pi * 0.5;\\nconst float phi = (1.0+sqrt(5.0))/2.0;\\n\\nout vec4 outColor;\\n\\n#define MAX_STEPS 100\\n#define MAX_DIST 50.\\n#define SURF_DIST .001\\n\\n#define ROT(a) mat2(cos(a), -sin(a), sin(a), cos(a))\\n#define SHEARX(a) mat2(1, 0, sin(a), 1)\\n\\n////////////////////// NOISE\\n\\n//\\tSimplex 3D Noise\\n//\\tby Ian McEwan, Ashima Arts\\n//\\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\\n\\nfloat snoise(vec3 v){\\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n    // First corner\\n    vec3 i  = floor(v + dot(v, C.yyy) );\\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n    // Other corners\\n    vec3 g = step(x0.yzx, x0.xyz);\\n    vec3 l = 1.0 - g;\\n    vec3 i1 = min( g.xyz, l.zxy );\\n    vec3 i2 = max( g.xyz, l.zxy );\\n\\n    //  x0 = x0 - 0. + 0.0 * C\\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\\n\\n    // Permutations\\n    i = mod(i, 289.0 );\\n    vec4 p = permute( permute( permute(\\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n    // Gradients\\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\\n    float n_ = 1.0/7.0; // N=7\\n    vec3  ns = n_ * D.wyz - D.xzx;\\n\\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\\n\\n    vec4 x_ = floor(j * ns.z);\\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n    vec4 x = x_ *ns.x + ns.yyyy;\\n    vec4 y = y_ *ns.x + ns.yyyy;\\n    vec4 h = 1.0 - abs(x) - abs(y);\\n\\n    vec4 b0 = vec4( x.xy, y.xy );\\n    vec4 b1 = vec4( x.zw, y.zw );\\n\\n    vec4 s0 = floor(b0)*2.0 + 1.0;\\n    vec4 s1 = floor(b1)*2.0 + 1.0;\\n    vec4 sh = -step(h, vec4(0.0));\\n\\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n    vec3 p0 = vec3(a0.xy,h.x);\\n    vec3 p1 = vec3(a0.zw,h.y);\\n    vec3 p2 = vec3(a1.xy,h.z);\\n    vec3 p3 = vec3(a1.zw,h.w);\\n\\n    //Normalise gradients\\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n    p0 *= norm.x;\\n    p1 *= norm.y;\\n    p2 *= norm.z;\\n    p3 *= norm.w;\\n\\n    // Mix final noise value\\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n    m = m * m;\\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n    dot(p2,x2), dot(p3,x3) ) );\\n}\\n\\n// Camera helper\\n\\nvec3 Camera(vec2 uv, vec3 p, vec3 l, float z) {\\n    vec3 f = normalize(l-p),\\n    r = normalize(\\n    cross(\\n    vec3(0, 1, 0),\\n    f\\n    )\\n    ),\\n    u = cross(f, r),\\n    c = p + f * z,\\n    i = c + uv.x*r + uv.y*u,\\n    d = normalize(i-p);\\n    return d;\\n}\\n\\n// 2d rotation matrix helper\\nmat2 Rot(float a) {\\n    float x = cos(a);\\n    float y = sin(a);\\n    return mat2(x, -y, y, x);\\n}\\n\\n// RAY MARCHING PRIMITIVES\\n\\nfloat smin(float a, float b, float k) {\\n    float h = clamp(0.5+0.5*(b-a)/k, 0., 1.);\\n    return mix(b, a, h) - k*h*(1.0-h);\\n}\\n\\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\\n    vec3 ab = b-a;\\n    vec3 ap = p-a;\\n\\n    float t = dot(ab, ap) / dot(ab, ab);\\n    t = clamp(t, 0., 1.);\\n\\n    vec3 c = a + t*ab;\\n\\n    return length(p-c)-r;\\n}\\n\\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\\n    vec3 ab = b-a;\\n    vec3 ap = p-a;\\n\\n    float t = dot(ab, ap) / dot(ab, ab);\\n    //t = clamp(t, 0., 1.);\\n\\n    vec3 c = a + t*ab;\\n\\n    float x = length(p-c)-r;\\n    float y = (abs(t-.5)-.5)*length(ab);\\n    float e = length(max(vec2(x, y), 0.));\\n    float i = min(max(x, y), 0.);\\n\\n    return e+i;\\n}\\n\\nfloat sdCappedCylinder( vec3 p, float h, float r )\\n{\\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\\n}\\n\\nfloat sdSphere(vec3 p, float s)\\n{\\n    return length(p)-s;\\n}\\n\\nfloat sdTorus(vec3 p, vec2 r) {\\n    float x = length(p.xz)-r.x;\\n    return length(vec2(x, p.y))-r.y;\\n}\\n\\nfloat sdRoundBox(vec3 p, vec3 b, float r)\\n{\\n    vec3 q = abs(p) - b;\\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;\\n}\\n\\nfloat sdBeam(vec3 p, vec3 c)\\n{\\n    return length(p.xz-c.xy)-c.z;\\n}\\n\\nfloat dBox(vec3 p, vec3 s) {\\n    p = abs(p)-s;\\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\\n}\\n\\nvec2 opUnion(vec2 curr, float d, float id)\\n{\\n    if (d < curr.x)\\n    {\\n        curr.x = d;\\n        curr.y = id;\\n    }\\n\\n    return curr;\\n}\\n\\nvec2 softMinUnion(vec2 curr, float d, float id)\\n{\\n    if (d < curr.x)\\n    {\\n        curr.x = smin(curr.x, d, 0.5);\\n        curr.y = id;\\n    }\\n\\n    return curr;\\n}\\n\\nfloat sdBoundingBox(vec3 p, vec3 b, float e)\\n{\\n    p = abs(p)-b;\\n    vec3 q = abs(p+e)-e;\\n    return min(min(\\n    length(max(vec3(p.x, q.y, q.z), 0.0))+min(max(p.x, max(q.y, q.z)), 0.0),\\n    length(max(vec3(q.x, p.y, q.z), 0.0))+min(max(q.x, max(p.y, q.z)), 0.0)),\\n    length(max(vec3(q.x, q.y, p.z), 0.0))+min(max(q.x, max(q.y, p.z)), 0.0));\\n}\\n\\nfloat sdHexPrism( vec3 p, vec2 h )\\n{\\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\\n    p = abs(p);\\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\\n    vec2 d = vec2(\\n    length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\\n    p.z-h.y );\\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\\n}\\n\\nfloat shape(float v, float x)\\n{\\n    return x > 0.0 ? -abs(v) : abs(v);\\n}\\n\\nconst mat2 frontPlaneRot = ROT(0.05235987755982988);\\nconst mat2 backPlaneRot = ROT(-0.05235987755982988);\\nconst mat2 sCutRot = ROT(0.88);\\nconst mat2 rotate90 = ROT(1.5707963267948966);\\nconst mat2 fourShear = SHEARX(-0.20943951023931953);\\n\\nvec2 getDistance(vec3 p) {\\n\\n    float t = u_time;\\n\\n    // ground plane\\n    //float pd = p.y + 2.0;\\n\\n    vec2 result = vec2(1e6, 0);\\n\\n    vec3 cutoutPos = p;\\n\\n    cutoutPos.yz *= rotate90;\\n\\n    float cutout = sdCappedCylinder(cutoutPos, 1.89, 1.0);\\n\\n    float gCutout = sdCappedCylinder(cutoutPos, 1.78, 1.0);\\n\\n    float gGapCutout = dBox(cutoutPos - vec3(1.36,0, 0.36), vec3(1,1,0.36));\\n\\n    float gInnerCutout = sdRoundBox(cutoutPos - vec3(-0.2,0,0), vec3(0.42,1,1.12), 0.45);\\n\\n    float flattenedSideCutout = dot(p - vec3(-0.98,0,0), vec3(-1,0,0) );\\n\\n    float gFlapCutout = dBox(cutoutPos - vec3(0.62 + 0.35,0, -0.35), vec3(0.5,1,0.35));\\n\\n    float round = 0.4;\\n\\n    // Letter S\\n\\n    float sCutout = sdRoundBox(cutoutPos - vec3(-0.2,0,0.5), vec3(0.44 - round, 1.0- round, 0.8-round), round);\\n\\n    round = 0.2;\\n\\n    vec3 s2Pos = cutoutPos- vec3( 0.21,0,0.56);\\n\\n    s2Pos.xz *= sCutRot;\\n\\n    float s2Cutout = sdRoundBox(s2Pos , vec3(0.51 - round, 1.1 - round, 0.18-round), round);\\n    sCutout = max(-s2Cutout, sCutout);\\n\\n    s2Pos = cutoutPos- vec3( -0.6,0,0.36);\\n    s2Pos.xz *= sCutRot;\\n\\n    float s3Cutout = sdRoundBox(s2Pos , vec3(0.51 - round, 1.1 - round, 0.18-round), round);\\n    sCutout = max(-s3Cutout, sCutout);\\n\\n    float sSerif = dBox(cutoutPos - vec3(0.2,0, 1.02), vec3(0.05,1,0.24));\\n    sCutout = min(sSerif, sCutout);\\n\\n    sSerif = dBox(cutoutPos - vec3(-0.66,0, 0.03), vec3(0.05,1,0.24));\\n    sCutout = min(sSerif, sCutout);\\n\\n    // Zero\\n\\n    vec3 elongation = vec3(0,1,0.32);\\n\\n    vec3 zCutoutPos = cutoutPos- vec3(-0.47,0,-0.95);\\n\\n    vec3 q = zCutoutPos - clamp( zCutoutPos, -elongation, elongation );\\n\\n    float zeroCutout = sdTorus(q , vec2(0.155, 0.07));\\n\\n    // four\\n\\n    vec3 fourShBoxPos = p;\\n    fourShBoxPos.yx *= fourShear;\\n    float fourShBox = dBox(fourShBoxPos - vec3(.14,-0.8,0), vec3(0.1,0.38,1));\\n\\n    float fourHBox = dBox(p - vec3(.14,-1.08,0), vec3(0.28,0.1,1));\\n\\n    float fourVBox = dBox(p - vec3(.25,-1.15,0), vec3(0.1, 0.3,1));\\n\\n    gInnerCutout = max(flattenedSideCutout, gInnerCutout);\\n    gInnerCutout = max(-gFlapCutout, gInnerCutout);\\n    gInnerCutout = max(-sCutout, gInnerCutout);\\n    gInnerCutout = max(-zeroCutout, gInnerCutout);\\n    gInnerCutout = max(-fourShBox, gInnerCutout);\\n    gInnerCutout = max(-fourHBox, gInnerCutout);\\n    gInnerCutout = max(-fourVBox, gInnerCutout);\\n\\n    gCutout = max(-gGapCutout, gCutout);\\n    gCutout = max(-gInnerCutout, gCutout);\\n    cutout = max(-gCutout, cutout);\\n\\n    float sphere = sdSphere( p , 1.8 );\\n\\n    vec3 frontPlane = vec3(0,0,-1);\\n    frontPlane.yz *= frontPlaneRot;\\n\\n    vec3 backPlane = vec3(0,0,1);\\n    backPlane.yz *= backPlaneRot;\\n\\n    float front = dot(p + vec3(0,0,.25), frontPlane );\\n    float back = dot(p - vec3(0,0,.25), backPlane)  ;\\n\\n    sphere = max(sphere, front);\\n    sphere = max(sphere, back) - 0.2;\\n    sphere = max(-cutout, sphere);\\n\\n    //result = opUnion(result, pd, 4.0);\\n    result = opUnion(result, sphere, 1.0);\\n\\n    vec3 shaftPos = p;\\n\\n    shaftPos.yz *= rotate90;\\n\\n    float zOffset = - u_time * 10.0;\\n\\n    vec3 noisePos = p - vec3(0,0, zOffset);\\n\\n    float n = snoise(noisePos);\\n    float shaft = -sdBeam( shaftPos + shape(n,p.x) * 0.25 , vec3(0,0,3) ) * 0.6;\\n\\n    float bottom = dot(p + vec3(0,2.2,0), vec3(0,1,0) );\\n\\n    result = opUnion(result, bottom, 3.0);\\n    result = opUnion(result, shaft, n < 0.4 ? 4.0 : 5.0);\\n\\n    vec3 supportPos = p;\\n    supportPos.x = abs(supportPos.x);\\n    supportPos.x -= 2.5;\\n    supportPos.z -= zOffset;\\n\\n    float c = 20.0;\\n    supportPos.z = mod(supportPos.z+0.5*c,c)-0.5*c;\\n\\n    supportPos.yz *= rotate90;\\n\\n    float support = sdHexPrism(supportPos, vec2(0.4, 10));\\n\\n    float support2 = sdHexPrism(p - vec3(0,2.5,0), vec2(0.4, 20));\\n\\n    vec3 support3Pos = p;\\n    support3Pos.z -= zOffset;\\n    support3Pos.z = mod(support3Pos.z+0.5*c,c)-0.5*c;\\n    support3Pos.xz *= rotate90;\\n\\n    float support3 = sdHexPrism(support3Pos - vec3(0,2.5,0), vec2(0.4, 20));\\n\\n    result = opUnion(result, support, 6.0);\\n    result = opUnion(result, support2, 6.0);\\n    result = opUnion(result, support3, 6.0);\\n\\n// DEBUG\\n//    result = opUnion(result, gFlapCutout, 2.1);\\n//    result = opUnion(result, gGapCutout, 1.9);\\n//    result = opUnion(result, sCutout, 2.2);\\n//    result = opUnion(result, zeroCutout, 2.3);\\n//    result = opUnion(result, fourShBox, 2.4);\\n//    result = opUnion(result, fourHBox, 2.5);\\n//    result = opUnion(result, fourVBox, 2.6);\\n//    result = opUnion(result, s2Cutout, 2.7);\\n//    result = opUnion(result, s3Cutout, 2.8);\\n\\n    return result;\\n}\\n\\nvec2 rayMarch(vec3 ro, vec3 rd) {\\n\\n    float dO=0.;\\n    float id = 0.0;\\n\\n    for (int i=0; i < MAX_STEPS; i++) {\\n        vec3 p = ro + rd*dO;\\n        vec2 result = getDistance(p);\\n        float dS = result.x;\\n        dO += dS;\\n        id = result.y;\\n        if (dO > MAX_DIST || abs(dS) < SURF_DIST)\\n        break;\\n    }\\n\\n    return vec2(dO, id);\\n}\\n\\nvec3 getNormal(vec3 p) {\\n    float d = getDistance(p).x;\\n    vec2 e = vec2(.001, 0);\\n\\n    vec3 n = d - vec3(\\n        getDistance(p-e.xyy).x,\\n        getDistance(p-e.yxy).x,\\n        getDistance(p-e.yyx).x\\n    );\\n\\n    return normalize(n);\\n}\\n\\nvec3 getPaletteColor(float id)\\n{\\n    int last = u_palette.length() - 1;\\n    //return id < float(last) ? mix(u_palette[int(id)], u_palette[int(id) + 1], fract(id)) : u_palette[last];\\n    return mix(u_palette[int(id)], u_palette[int(id) + 1], fract(id));\\n}\\n\\nvoid main(void)\\n{\\n    vec2 uv = (gl_FragCoord.xy-.5*u_resolution.xy)/u_resolution.y;\\n    vec2 m = u_mouse.xy/u_resolution.xy;\\n\\n    vec3 col = vec3(0);\\n    vec3 ro = vec3(\\n    (cos(u_time * 1.7) + cos(u_time)) * 0.8,\\n    (sin(u_time * 1.3) - sin(u_time * 1.9)) * 0.8,\\n        -10.0 + sin(u_time) * 2.0\\n    );\\n\\n    //    ro.yz *= Rot((-m.y + 0.5)* 7.0);\\n//    ro.xz *= Rot((-m.x + 0.5)* 7.0 + u_time);\\n\\n    vec3 lookAt = vec3(0);\\n\\n    vec3 rd = Camera(uv, ro, lookAt, 1.3);\\n\\n    vec2 result = rayMarch(ro, rd);\\n\\n    float d = result.x;\\n\\n    if (d < MAX_DIST) {\\n        vec3 p = ro + rd * d;\\n\\n        vec3 lightPos = ro + vec3(0, 3, 0);\\n        vec3 lightDir = normalize(lightPos - p);\\n        vec3 norm = getNormal(p);\\n\\n        vec3 lightColor = vec3(40.0);\\n\\n        float id = result.y;\\n\\n        // ambient\\n        vec3 ambient = lightColor * vec3(0.01,0.005,0);\\n\\n        // diffuse\\n        float diff = max(dot(norm, lightDir), 0.0);\\n        vec3 tone = getPaletteColor(id);\\n        vec3 diffuse = lightColor * (diff * tone);\\n\\n        // specular\\n        vec3 viewDir = normalize(ro);\\n        vec3 reflectDir = reflect(-lightDir, norm);\\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_shiny[int(id)]);\\n        vec3 specular = lightColor * spec * vec3(0.7843,0.8823,0.9451);\\n\\n        col = clamp((ambient + diffuse + specular)/ max(1.0,d*d), 0.0, 1.0);\\n\\n//        col =  dsQ * 0.2 + tone * dif * dsQ * 50.0;\\n    }\\n\\n    col = pow(col, vec3(1.0/2.2));\\n\\n    outColor = vec4(\\n        col,\\n        1.0\\n    );\\n\\n    //outColor = vec4(1,0,1,1);\\n}\\n\";","const colorRegExp = /^(#)?([0-9a-f]+)$/i;\n\nfunction hex(n)\n{\n    const s = n.toString(16);\n\n    return s.length === 1 ? \"0\" + s : s;\n}\n\nfunction hue2rgb(p, q, t){\n    if(t < 0) t += 1;\n    if(t > 1) t -= 1;\n    if(t < 1/6) return p + (q - p) * 6 * t;\n    if(t < 1/2) return q;\n    if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n    return p;\n}\n\nexport default class Color\n{\n    r;\n    g;\n    b;\n\n    constructor(r,g,b)\n    {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    mix(other, ratio, out)\n    {\n        if (!out)\n        {\n            out = new Color();\n        }\n        out.r = (this.r + (other.r - this.r) * ratio)|0;\n        out.g = (this.g + (other.g - this.g) * ratio)|0;\n        out.b = (this.b + (other.b - this.b) * ratio)|0;\n\n        return out;\n    }\n\n    multiply(n, out)\n    {\n        if (!out)\n        {\n            out = new Color();\n        }\n\n        out.r = this.r * n;\n        out.g = this.g * n;\n        out.b = this.b * n;\n        return out;\n    }\n\n    toRGBHex()\n    {\n        return \"#\" + hex(this.r) + hex(this.g) + hex(this.b );\n    }\n\n    toHex()\n    {\n        return (this.r << 16) + (this.g << 8) + this.b;\n    }\n\n    static validate(color)\n    {\n\n        let m;\n        if (typeof color !== \"string\" || !(m = colorRegExp.exec(color)))\n        {\n            return null;\n        }\n        const col = m[2];\n\n        if (col.length === 3)\n        {\n            return new Color(\n                parseInt(col[0], 16) * 17,\n                parseInt(col[1], 16) * 17,\n                parseInt(col[2], 16) * 17\n            )\n        }\n        else if (col.length === 6)\n        {\n            return new Color(\n                parseInt(col.substring(0, 2), 16),\n                parseInt(col.substring(2, 4), 16),\n                parseInt(col.substring(4, 6), 16)\n            )\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    static from(color, factor = 1.0)\n    {\n        if (Array.isArray(color))\n        {\n            const length = color.length;\n            const array = new Float32Array(length * 3);\n\n            const f = factor/255;\n\n            let off = 0;\n            for (let i = 0; i < length; i++)\n            {\n                const col = Color.from(color[i]);\n                array[off++] = col.r * f;\n                array[off++] = col.g * f;\n                array[off++] = col.b * f;\n            }\n\n            return array;\n        }\n\n        const col = Color.validate(color);\n\n        if (!col)\n        {\n            throw new Error(\"Invalid color \" + color);\n        }\n\n        col.r *= factor;\n        col.g *= factor;\n        col.b *= factor;\n\n        return col;\n    }\n\n    static fromHSL(h,s,l)\n    {\n        let r, g, b;\n\n        if(s <= 0){\n            r = g = b = l; // achromatic\n        }else{\n\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return new Color(\n            Math.round(r * 255),\n            Math.round(g * 255),\n            Math.round(b * 255)\n        );\n    }\n}\n\n","// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\n\nimport vertexShaderSource from \"./shade04.vert\"\nimport fragmentShaderSource from \"./shade04.frag\"\nimport Color from \"./Color\";\n\nconsole.log(fragmentShaderSource)\n\nconst PHI = (1 + Math.sqrt(5)) / 2;\nconst TAU = Math.PI * 2;\nconst DEG2RAD_FACTOR = TAU / 360;\n\nconst config = {\n    width: 0,\n    height: 0\n};\n\nlet canvas, gl, vao, program;\n\n\n// uniform: current time\nlet u_time;\n\nlet u_resolution;\n\nlet u_mouse;\n\nlet u_palette;\n\nlet u_shiny;\n\nlet mouseX = 0, mouseY = 0, mouseDown, startX, startY;\n\n// Get the container element's bounding box\nlet canvasBounds;\n\nfunction resize()\n{\n    const width = (window.innerWidth) & ~15;\n    const height = (window.innerHeight) | 0;\n\n    config.width = width;\n    config.height = height;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    mouseX = width/2;\n    mouseY = height/2;\n\n    gl.viewport(0, 0, canvas.width, canvas.height);\n}\n\nwindow.onload = () => {\n\n    requestAnimationFrame(main);\n};\n\n\n\nfunction createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n\n    console.error(gl.getShaderInfoLog(shader));  // eslint-disable-line\n    gl.deleteShader(shader);\n    return undefined;\n}\n\nfunction createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n\n    console.error(gl.getProgramInfoLog(program));  // eslint-disable-line\n    gl.deleteProgram(program);\n    return undefined;\n}\n\n\nfunction printError(msg)\n{\n    document.getElementById(\"out\").innerHTML = \"<p>\" + msg + \"</p>\";\n}\n\nfunction main(time)\n{\n    const f = mouseDown ? 1 : -1;\n\n    // update uniforms\n    gl.uniform1f(u_time, time / 1000.0);\n    gl.uniform2f(u_resolution, config.width, config.height);\n    gl.uniform4f(u_mouse, mouseX, config.height - mouseY, startX * f, (config.height - startY) * f);\n\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    // draw\n    const primitiveType = gl.TRIANGLES;\n    const offset = 0;\n    const count = 6;\n    gl.drawArrays(primitiveType, offset, count);\n\n    requestAnimationFrame(main);\n}\n\n\nwindow.onload = () => {\n    // Get A WebGL context\n    canvas = document.getElementById(\"screen\");\n    gl = canvas.getContext(\"webgl2\");\n    if (!gl) {\n        canvas.parentNode.removeChild(canvas);\n        printError(\"Cannot run shader. Your browser does not support WebGL2.\");\n        return;\n    }\n\n    // create GLSL shaders, upload the GLSL source, compile the shaders\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n    // Link the two shaders into a program\n    program = createProgram(gl, vertexShader, fragmentShader);\n\n    // look up where the vertex data needs to go.\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n\n    // Create a buffer and put three 2d clip space points in it\n    const positionBuffer = gl.createBuffer();\n\n    // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    const positions = [\n        -1, -1,\n         1, -1,\n        -1, 1,\n        -1, 1,\n         1, 1,\n         1,-1\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    // Create a vertex array object (attribute state)\n    vao = gl.createVertexArray();\n\n    // and make it the one we're currently working with\n    gl.bindVertexArray(vao);\n\n    // Turn on the attribute\n    gl.enableVertexAttribArray(positionAttributeLocation);\n\n    // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n    const size = 2;          // 2 components per iteration\n    const type = gl.FLOAT;   // the data is 32bit floats\n    const normalize = false; // don't normalize the data\n    const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\n    let offset = 0;        // start at the beginning of the buffer\n    gl.vertexAttribPointer(\n        positionAttributeLocation, size, type, normalize, stride, offset);\n\n    resize();\n\n    // Tell WebGL how to convert from clip space to pixels\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n\n    u_time = gl.getUniformLocation(program, \"u_time\");\n    u_resolution = gl.getUniformLocation(program, \"u_resolution\");\n    u_mouse = gl.getUniformLocation(program, \"u_mouse\");\n    u_palette = gl.getUniformLocation(program, \"u_palette\");\n    u_shiny = gl.getUniformLocation(program, \"u_shiny\");\n\n    // Tell it to use our program (pair of shaders)\n    gl.useProgram(program);\n\n    // Bind the attribute/buffer set we want.\n    gl.bindVertexArray(vao);\n\n    window.addEventListener(\"resize\", resize, true);\n    canvas.addEventListener(\"mousemove\", onMouseMove, true);\n    canvas.addEventListener(\"mousedown\", onMouseDown, true);\n    document.addEventListener(\"mouseup\", onMouseUp, true);\n\n    canvasBounds = document.getElementById(\"screen\").getBoundingClientRect();\n\n    const paletteArray = Color.from(\n        [\n            \"#000\",\n            \"#fff\",\n            \"#c02\",\n            \"#00244f\",\n            \"#004d9d\",\n            \"#010101\",\n            \"#4c3a25\"\n        ],\n        1\n    );\n\n    console.log(\"PALETTE\", paletteArray);\n\n\n    gl.uniform3fv(u_palette, paletteArray);\n    gl.uniform1fv(u_shiny, new Float32Array([\n        2,\n          1000,\n        2,\n        2,\n        2,\n        2,\n        2\n    ]));\n\n    requestAnimationFrame(main)\n}\n\n\n\n// Apply the mouse event listener\n\nfunction onMouseMove(ev)\n{\n    if (mouseDown)\n    {\n        mouseX = (ev.clientX - canvasBounds.left) + self.pageXOffset;\n        mouseY = (ev.clientY - canvasBounds.top) + self.pageYOffset;\n    }\n}\n\nfunction onMouseDown(ev)\n{\n    mouseDown = true;\n    startX = (ev.clientX - canvasBounds.left) + self.pageXOffset;\n    startY = (ev.clientY - canvasBounds.top) + self.pageYOffset;\n    mouseX = startX;\n    mouseY = startY;\n}\n\nfunction onMouseUp(ev)\n{\n    mouseDown = false;\n}\n\n","export default \"#version 300 es\\n#define GLSLIFY 1\\n\\n// an attribute is an input (in) to a vertex shader.\\n// It will receive data from a buffer\\nin vec4 a_position;\\n\\n// all shaders have a main function\\nvoid main() {\\n\\n    // gl_Position is a special variable a vertex shader\\n    // is responsible for setting\\n    gl_Position = a_position;\\n}\\n\";"],"sourceRoot":""}